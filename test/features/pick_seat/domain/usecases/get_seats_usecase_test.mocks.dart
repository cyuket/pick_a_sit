// Mocks generated by Mockito 5.1.0 from annotations
// in pick_a_sit/test/features/pick_seat/domain/usecases/get_seats_usecase_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;

import 'package:dartz/dartz.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;
import 'package:pick_a_sit/core/errors/failure.dart' as _i5;
import 'package:pick_a_sit/features/pick_seat/domain/entities/bus_line_entity.dart'
    as _i6;
import 'package:pick_a_sit/features/pick_seat/domain/entities/seat_entity.dart'
    as _i7;
import 'package:pick_a_sit/features/pick_seat/domain/entities/user_entity.dart'
    as _i8;
import 'package:pick_a_sit/features/pick_seat/domain/repositories/pick_seat_repository.dart'
    as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeEither_0<L, R> extends _i1.Fake implements _i2.Either<L, R> {}

/// A class which mocks [PickSeatRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPickSeatRepository extends _i1.Mock
    implements _i3.PickSeatRepository {
  MockPickSeatRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i6.BusLineEntity>>> getBusLines() =>
      (super.noSuchMethod(Invocation.method(#getBusLines, []),
          returnValue:
              Future<_i2.Either<_i5.Failure, List<_i6.BusLineEntity>>>.value(
                  _FakeEither_0<_i5.Failure, List<_i6.BusLineEntity>>())) as _i4
          .Future<_i2.Either<_i5.Failure, List<_i6.BusLineEntity>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, List<_i7.SeatEntity>>> getSeats(
          String? busLine) =>
      (super.noSuchMethod(Invocation.method(#getSeats, [busLine]),
              returnValue:
                  Future<_i2.Either<_i5.Failure, List<_i7.SeatEntity>>>.value(
                      _FakeEither_0<_i5.Failure, List<_i7.SeatEntity>>()))
          as _i4.Future<_i2.Either<_i5.Failure, List<_i7.SeatEntity>>>);
  @override
  _i4.Future<_i2.Either<_i5.Failure, bool>> book(
          String? busLine, int? seatNumber, _i8.UserEntity? userEntity) =>
      (super.noSuchMethod(
              Invocation.method(#book, [busLine, seatNumber, userEntity]),
              returnValue: Future<_i2.Either<_i5.Failure, bool>>.value(
                  _FakeEither_0<_i5.Failure, bool>()))
          as _i4.Future<_i2.Either<_i5.Failure, bool>>);
}
